<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Toolbox Hub | Free AI Resource Directory</title>
  <meta name="description" content="Discover, save, and share the best free AI tools. Community-driven directory updated daily.">
  <link rel="stylesheet" href="style.css">
  <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ü§ñ</text></svg>">
</head>
<body>
  <header>
    <div class="header-container">
      <div class="logo-area">
        <h1>ü§ñ AI Toolbox Hub</h1>
        <p>Discover & share free AI resources</p>
      </div>
      <div class="search-area">
        <div class="search-bar">
          <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24">
            <path d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 0 0 1.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.505 6.505 0 0 0-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 0 0 5.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
          </svg>
          <input type="text" id="search" placeholder="Search 250+ AI tools..." autocomplete="off">
          <button id="clear-search">√ó</button>
        </div>
        <div class="filter-area">
          <select id="category-filter">
            <option value="all">All Categories</option>
            <!-- Filled dynamically -->
          </select>
          <select id="sort-filter">
            <option value="popular">Most Popular</option>
            <option value="newest">Newest First</option>
            <option value="rating">Highest Rated</option>
          </select>
          <button id="theme-toggle" aria-label="Toggle dark mode">
            <svg class="sun" width="20" height="20" viewBox="0 0 24 24">
              <path d="M12 9c1.65 0 3 1.35 3 3s-1.35 3-3 3-3-1.35-3-3 1.35-3 3-3m0-2c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41L5.99 4.58zm12.37 12.37a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0a.996.996 0 0 0 0-1.41l-1.06-1.06zm1.06-10.96a.996.996 0 0 0 0-1.41.996.996 0 0 0-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06zM7.05 18.36a.996.996 0 0 0 0-1.41.996.996 0 0 0-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06z"/>
            </svg>
            <svg class="moon" width="20" height="20" viewBox="0 0 24 24">
              <path d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-2.98 0-5.4-2.42-5.4-5.4 0-1.81.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1z"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </header>

  <main>
    <div class="controls">
      <div class="view-toggle">
        <button class="grid-view active" aria-label="Grid view">‚óº‚óº</button>
        <button class="list-view" aria-label="List view">‚â°</button>
      </div>
      <div id="filter-tags"></div>
    </div>
    
    <div id="tool-list" class="grid-view"></div>
    
    <div class="empty-state">
      <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23666' d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3C/svg%3E" alt="No results">
      <h3>No tools found</h3>
      <p>Try adjusting your search or filters</p>
    </div>
  </main>

  <div id="tool-modal" class="modal">
    <div class="modal-content">
      <button class="close-modal">&times;</button>
      <div class="modal-body"></div>
    </div>
  </div>

  <footer>
    <div class="footer-content">
      <div class="footer-about">
        <h3>AI Toolbox Hub</h3>
        <p>Community-driven directory of free AI tools. Updated daily by users worldwide.</p>
      </div>
      <div class="footer-links">
        <button id="submit-tool">+ Submit a Tool</button>
        <button id="newsletter">üì∞ Get AI Updates</button>
      </div>
    </div>
    <div class="footer-bottom">
      <p>Made with ‚ù§Ô∏è for the AI community | Open Source Project</p>
    </div>
  </footer>

  <script src="script.js"></script>
</body>
</html>
:root {
  --primary: #4361ee;
  --secondary: #3f37c9;
  --accent: #4895ef;
  --light: #f8f9fa;
  --dark: #212529;
  --gray: #6c757d;
  --light-gray: #e9ecef;
  --card-shadow: 0 4px 12px rgba(0,0,0,0.08);
  --transition: all 0.3s ease;
}

[data-theme="dark"] {
  --primary: #4895ef;
  --secondary: #4361ee;
  --accent: #3f37c9;
  --light: #121212;
  --dark: #f8f9fa;
  --gray: #adb5bd;
  --light-gray: #2d2d2d;
  --card-shadow: 0 4px 12px rgba(0,0,0,0.25);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
  background: var(--light);
  color: var(--dark);
  line-height: 1.6;
  transition: var(--transition);
}

header {
  background: var(--primary);
  color: white;
  padding: 1.5rem 0;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  position: sticky;
  top: 0;
  z-index: 100;
}

.header-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.logo-area h1 {
  font-size: 2.2rem;
  display: flex;
  align-items: center;
  gap: 10px;
}

.logo-area p {
  opacity: 0.9;
  font-size: 1.1rem;
}

.search-area {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.search-bar {
  position: relative;
  display: flex;
  align-items: center;
}

.search-icon {
  position: absolute;
  left: 15px;
  fill: var(--gray);
}

#search {
  padding: 14px 20px 14px 45px;
  width: 100%;
  border: none;
  border-radius: 50px;
  font-size: 1rem;
  background: rgba(255,255,255,0.15);
  color: white;
  backdrop-filter: blur(10px);
  transition: var(--transition);
}

#search::placeholder {
  color: rgba(255,255,255,0.7);
}

#search:focus {
  outline: none;
  background: rgba(255,255,255,0.25);
  box-shadow: 0 0 0 3px rgba(255,255,255,0.2);
}

#clear-search {
  position: absolute;
  right: 15px;
  background: none;
  border: none;
  color: white;
  font-size: 1.5rem;
  cursor: pointer;
  opacity: 0.7;
  display: none;
}

#clear-search:hover {
  opacity: 1;
}

.filter-area {
  display: flex;
  gap: 10px;
  flex-wrap: wrap;
}

select, #theme-toggle {
  padding: 10px 15px;
  border-radius: 50px;
  border: none;
  background: rgba(255,255,255,0.15);
  color: white;
  font-size: 0.95rem;
  cursor: pointer;
  backdrop-filter: blur(10px);
  transition: var(--transition);
}

select:hover, #theme-toggle:hover {
  background: rgba(255,255,255,0.25);
}

select:focus {
  outline: none;
}

#theme-toggle {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 44px;
  height: 44px;
}

.moon { display: none; }
[data-theme="dark"] .sun { display: none; }
[data-theme="dark"] .moon { display: block; }

main {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 20px;
}

.controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  flex-wrap: wrap;
  gap: 15px;
}

.view-toggle {
  display: flex;
  background: var(--light-gray);
  border-radius: 50px;
  padding: 5px;
}

.view-toggle button {
  border: none;
  background: none;
  padding: 8px 15px;
  border-radius: 50px;
  cursor: pointer;
  font-weight: bold;
  transition: var(--transition);
}

.view-toggle button.active {
  background: white;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

#filter-tags {
  display: flex;
  gap: 10px;
  flex-wrap: wrap;
}

.tag {
  background: var(--light-gray);
  padding: 6px 12px;
  border-radius: 50px;
  font-size: 0.9rem;
  display: flex;
  align-items: center;
  gap: 5px;
}

.tag button {
  background: none;
  border: none;
  cursor: pointer;
  font-weight: bold;
  opacity: 0.7;
}

#tool-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 25px;
}

#tool-list.list-view {
  display: flex;
  flex-direction: column;
}

.empty-state {
  text-align: center;
  padding: 5rem 0;
  display: none;
}

.empty-state img {
  width: 80px;
  height: 80px;
  opacity: 0.5;
  margin-bottom: 1rem;
}

.tool {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: var(--card-shadow);
  transition: var(--transition);
  display: flex;
  flex-direction: column;
  height: 100%;
}

#tool-list.list-view .tool {
  flex-direction: row;
  height: auto;
}

.tool:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px rgba(0,0,0,0.1);
}

.tool-image {
  height: 160px;
  background: var(--light-gray);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

#tool-list.list-view .tool-image {
  width: 200px;
  height: auto;
  flex-shrink: 0;
  border-radius: 12px 0 0 12px;
}

.tool-image img {
  width: 60px;
  height: 60px;
  object-fit: contain;
}

.tool-content {
  padding: 20px;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}

#tool-list.list-view .tool-content {
  flex-direction: row;
  flex-wrap: wrap;
  align-items: center;
  gap: 15px;
}

.tool-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 10px;
  margin-bottom: 10px;
}

.tool-title {
  font-size: 1.3rem;
  color: var(--dark);
}

.tool-actions {
  display: flex;
  gap: 8px;
}

.tool-actions button {
  background: none;
  border: none;
  cursor: pointer;
  opacity: 0.7;
  transition: var(--transition);
  display: flex;
  align-items: center;
  justify-content: center;
}

.tool-actions button:hover {
  opacity: 1;
  transform: scale(1.1);
}

.tool-actions svg {
  width: 20px;
  height: 20px;
  fill: currentColor;
}

.tool-meta {
  display: flex;
  gap: 10px;
  margin-bottom: 15px;
  flex-wrap: wrap;
}

.category {
  background: #e0f7fa;
  color: #00695c;
  padding: 4px 12px;
  border-radius: 50px;
  font-size: 0.85rem;
  font-weight: 500;
}

.tool-rating {
  display: flex;
  align-items: center;
  gap: 3px;
  background: #fff8e1;
  color: #ff8f00;
  padding: 4px 10px;
  border-radius: 50px;
  font-size: 0.85rem;
  font-weight: 500;
}

.tool-description {
  margin-bottom: 15px;
  color: var(--gray);
  flex-grow: 1;
}

#tool-list.list-view .tool-description {
  flex-basis: 100%;
}

.tool-link {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  background: var(--primary);
  color: white;
  padding: 10px 20px;
  border-radius: 50px;
  text-decoration: none;
  font-weight: 500;
  transition: var(--transition);
  margin-top: 10px;
  align-self: flex-start;
}

.tool-link:hover {
  background: var(--secondary);
  transform: translateY(-2px);
}

footer {
  background: var(--light-gray);
  padding: 3rem 0 1.5rem;
  margin-top: 3rem;
}

.footer-content {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  gap: 40px;
}

.footer-about {
  max-width: 400px;
}

.footer-about h3 {
  margin-bottom: 1rem;
  font-size: 1.5rem;
}

.footer-links {
  display: flex;
  gap: 15px;
  align-items: flex-start;
}

.footer-links button {
  padding: 12px 25px;
  border-radius: 50px;
  border: none;
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition);
  display: flex;
  align-items: center;
  gap: 8px;
}

#submit-tool {
  background: var(--primary);
  color: white;
}

#newsletter {
  background: white;
  color: var(--dark);
  border: 1px solid var(--light-gray);
}

.footer-links button:hover {
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.footer-bottom {
  text-align: center;
  padding-top: 2rem;
  margin-top: 2rem;
  border-top: 1px solid rgba(0,0,0,0.05);
  color: var(--gray);
  font-size: 0.9rem;
}

/* Modal Styles */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.6);
  z-index: 1000;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.modal-content {
  background: white;
  border-radius: 15px;
  max-width: 800px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 25px 50px rgba(0,0,0,0.25);
  position: relative;
}

.close-modal {
  position: absolute;
  top: 15px;
  right: 15px;
  background: none;
  border: none;
  font-size: 1.8rem;
  cursor: pointer;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: var(--transition);
}

.close-modal:hover {
  background: var(--light-gray);
}

.modal-body {
  padding: 40px;
}

/* Responsive Design */
@media (max-width: 768px) {
  .header-container {
    flex-direction: column;
  }
  
  .footer-content {
    flex-direction: column;
    gap: 30px;
  }
  
  #tool-list {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  }
  
  #tool-list.list-view .tool {
    flex-direction: column;
  }
  
  #tool-list.list-view .tool-image {
    width: 100%;
    height: 160px;
    border-radius: 12px 12px 0 0;
  }
}

@media (max-width: 480px) {
  .filter-area {
    flex-direction: column;
  }
  
  select {
    width: 100%;
  }
  
  .view-toggle {
    width: 100%;
    justify-content: center;
  }
  
  .controls {
    justify-content: center;
  }
  
  .footer-links {
    flex-direction: column;
    width: 100%;
  }
  
  .footer-links button {
    width: 100%;
    justify-content: center;
  }
}
document.addEventListener('DOMContentLoaded', () => {
  // DOM Elements
  const toolList = document.getElementById('tool-list');
  const searchInput = document.getElementById('search');
  const clearSearchBtn = document.getElementById('clear-search');
  const categoryFilter = document.getElementById('category-filter');
  const sortFilter = document.getElementById('sort-filter');
  const themeToggle = document.getElementById('theme-toggle');
  const filterTags = document.getElementById('filter-tags');
  const gridViewBtn = document.querySelector('.grid-view');
  const listViewBtn = document.querySelector('.list-view');
  const emptyState = document.querySelector('.empty-state');
  const modal = document.getElementById('tool-modal');
  const closeModal = document.querySelector('.close-modal');
  const modalBody = document.querySelector('.modal-body');
  const submitToolBtn = document.getElementById('submit-tool');
  
  // State
  let allTools = [];
  let filteredTools = [];
  const userFavorites = JSON.parse(localStorage.getItem('favorites')) || {};
  const userRatings = JSON.parse(localStorage.getItem('ratings')) || {};
  const userBookmarks = JSON.parse(localStorage.getItem('bookmarks')) || {};
  const userContributions = JSON.parse(localStorage.getItem('contributions')) || [];
  
  // Initialize
  initTheme();
  fetchTools();
  
  // Event Listeners
  searchInput.addEventListener('input', filterTools);
  clearSearchBtn.addEventListener('click', clearSearch);
  categoryFilter.addEventListener('change', filterTools);
  sortFilter.addEventListener('change', sortTools);
  themeToggle.addEventListener('click', toggleTheme);
  gridViewBtn.addEventListener('click', () => changeView('grid'));
  listViewBtn.addEventListener('click', () => changeView('list'));
  closeModal.addEventListener('click', () => modal.style.display = 'none');
  modal.addEventListener('click', (e) => {
    if (e.target === modal) modal.style.display = 'none';
  });
  submitToolBtn.addEventListener('click', showSubmissionForm);
  
  // Initialize theme from localStorage or system preference
  function initTheme() {
    const savedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
      document.documentElement.setAttribute('data-theme', 'dark');
    }
  }
  
  // Fetch tools from JSON and combine with user contributions
  function fetchTools() {
    fetch('tools.json')
      .then(res => {
        if (!res.ok) throw new Error('Failed to load tools');
        return res.json();
      })
      .then(data => {
        allTools = [...data, ...userContributions];
        populateCategoryFilter();
        filterTools();
      })
      .catch(error => {
        console.error('Error loading tools:', error);
        toolList.innerHTML = `
          <div class="error">
            <h2>‚ö†Ô∏è Failed to load tools</h2>
            <p>${error.message}</p>
            <p>Using locally saved tools instead</p>
          </div>
        `;
        allTools = userContributions;
        filterTools();
      });
  }
  
  // Populate category filter dropdown
  function populateCategoryFilter() {
    const categories = [...new Set(allTools.map(tool => tool.category))];
    categories.sort();
    
    categories.forEach(category => {
      const option = document.createElement('option');
      option.value = category;
      option.textContent = category;
      categoryFilter.appendChild(option);
    });
  }
  
  // Filter tools based on search and category
  function filterTools() {
    const searchTerm = searchInput.value.toLowerCase();
    const category = categoryFilter.value;
    
    // Show/hide clear search button
    clearSearchBtn.style.display = searchTerm ? 'block' : 'none';
    
    // Reset filter tags
    filterTags.innerHTML = '';
    
    // Apply filters
    filteredTools = allTools.filter(tool => {
      const matchesSearch = 
        tool.name.toLowerCase().includes(searchTerm) ||
        tool.description.toLowerCase().includes(searchTerm) ||
        tool.category.toLowerCase().includes(searchTerm);
      
      const matchesCategory = category === 'all' || tool.category === category;
      
      return matchesSearch && matchesCategory;
    });
    
    // Add active filter tags
    if (searchTerm) {
      addFilterTag(`Search: "${searchTerm}"`, 'search');
    }
    
    if (category !== 'all') {
      addFilterTag(`Category: ${category}`, 'category');
    }
    
    // Sort and render
    sortTools();
  }
  
  // Add a filter tag
  function addFilterTag(text, type) {
    const tag = document.createElement('div');
    tag.className = 'tag';
    tag.innerHTML = `
      ${text}
      <button aria-label="Remove filter">√ó</button>
    `;
    
    tag.querySelector('button').addEventListener('click', () => {
      if (type === 'search') {
        searchInput.value = '';
        clearSearchBtn.style.display = 'none';
      } else if (type === 'category') {
        categoryFilter.value = 'all';
      }
      filterTools();
    });
    
    filterTags.appendChild(tag);
  }
  
  // Clear search input
  function clearSearch() {
    searchInput.value = '';
    clearSearchBtn.style.display = 'none';
    filterTools();
  }
  
  // Sort tools based on selected option
  function sortTools() {
    const sortBy = sortFilter.value;
    
    switch(sortBy) {
      case 'newest':
        filteredTools.sort((a, b) => new Date(b.added) - new Date(a.added));
        break;
      case 'rating':
        filteredTools.sort((a, b) => {
          const ratingA = userRatings[a.id]?.avg || a.rating || 0;
          const ratingB = userRatings[b.id]?.avg || b.rating || 0;
          return ratingB - ratingA;
        });
        break;
      case 'popular':
      default:
        // Sort by popularity (bookmarks + ratings)
        filteredTools.sort((a, b) => {
          const popularityA = 
            (userBookmarks[a.id] ? 1 : 0) + 
            (userRatings[a.id]?.count || 0);
          const popularityB = 
            (userBookmarks[b.id] ? 1 : 0) + 
            (userRatings[b.id]?.count || 0);
          return popularityB - popularityA;
        });
    }
    
    renderTools();
  }
  
  // Render tools to the DOM
  function renderTools() {
    if (filteredTools.length === 0) {
      toolList.innerHTML = '';
      emptyState.style.display = 'block';
      return;
    }
    
    emptyState.style.display = 'none';
    toolList.innerHTML = '';
    
    filteredTools.forEach(tool => {
      const toolCard = createToolCard(tool);
      toolList.appendChild(toolCard);
    });
  }
  
  // Create tool card element
  function createToolCard(tool) {
    const card = document.createElement('div');
    card.className = 'tool';
    
    // Calculate rating
    const userRating = userRatings[tool.id] || {};
    const ratingAvg = userRating.avg || tool.rating || 0;
    const ratingCount = userRating.count || tool.ratingCount || 0;
    
    card.innerHTML = `
      <div class="tool-image">
        <img src="${tool.icon || 'data:image/svg+xml,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 24 24\'%3E%3Cpath fill=\'%234361ee\' d=\'M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\'/%3E%3C/svg%3E'}" alt="${tool.name}">
      </div>
      <div class="tool-content">
        <div class="tool-header">
          <h3 class="tool-title">${tool.name}</h3>
          <div class="tool-actions">
            <button class="bookmark-btn" aria-label="${userBookmarks[tool.id] ? 'Remove bookmark' : 'Bookmark'}">
              <svg width="24" height="24" viewBox="0 0 24 24">
                <path fill="${userBookmarks[tool.id] ? 'currentColor' : 'none'}" stroke="currentColor" stroke-width="1.5" d="M17 3H7c-1.1 0-2 .9-2 2v16l7-3 7 3V5c0-1.1-.9-2-2-2z"/>
              </svg>
            </button>
            <button class="rate-btn" aria-label="Rate tool">‚òÖ</button>
          </div>
        </div>
        <div class="tool-meta">
          <span class="category">${tool.category}</span>
          <span class="tool-rating">‚òÖ ${ratingAvg.toFixed(1)} (${ratingCount})</span>
        </div>
        <p class="tool-description">${tool.description}</p>
        <a href="${tool.link}" class="tool-link" target="_blank">Visit Tool</a>
      </div>
    `;
    
    // Add event listeners
    card.querySelector('.bookmark-btn').addEventListener('click', () => toggleBookmark(tool.id, card));
    card.querySelector('.rate-btn').addEventListener('click', () => showRatingModal(tool));
    card.addEventListener('click', (e) => {
      if (!e.target.closest('.tool-actions') && !e.target.closest('a')) {
        showToolDetail(tool);
      }
    });
    
    return card;
  }
  
  // Toggle bookmark for a tool
  function toggleBookmark(toolId, card) {
    userBookmarks[toolId] = !userBookmarks[toolId];
    localStorage.setItem('bookmarks', JSON.stringify(userBookmarks));
    
    // Update UI
    const bookmarkIcon = card.querySelector('.bookmark-btn svg path');
    if (userBookmarks[toolId]) {
      bookmarkIcon.setAttribute('fill', 'currentColor');
    } else {
      bookmarkIcon.setAttribute('fill', 'none');
    }
  }
  
  // Show rating modal
  function showRatingModal(tool) {
    modalBody.innerHTML = `
      <h2>Rate ${tool.name}</h2>
      <div class="rating-stars">
        ${[1, 2, 3, 4, 5].map(star => `
          <button class="star" data-value="${star}">${star <= (userRatings[tool.id]?.rating || 0) ? '‚òÖ' : '‚òÜ'}</button>
        `).join('')}
      </div>
      <button id="submit-rating" class="submit-btn">Submit Rating</button>
    `;
    
    const stars = modalBody.querySelectorAll('.star');
    stars.forEach(star => {
      star.addEventListener('click', () => {
        const rating = parseInt(star.dataset.value);
        stars.forEach((s, i) => {
          s.textContent = i < rating ? '‚òÖ' : '‚òÜ';
        });
        
        modalBody.querySelector('#submit-rating').onclick = () => {
          saveRating(tool.id, rating);
          modal.style.display = 'none';
          filterTools(); // Refresh list to show updated rating
        };
      });
    });
    
    modal.style.display = 'flex';
  }
  
  // Save user rating
  function saveRating(toolId, rating) {
    if (!userRatings[toolId]) {
      userRatings[toolId] = { rating, count: 1, avg: rating };
    } else {
      const oldData = userRatings[toolId];
      const newCount = oldData.count + 1;
      const newAvg = ((oldData.avg * oldData.count) + rating) / newCount;
      userRatings[toolId] = {
        rating,
        count: newCount,
        avg: parseFloat(newAvg.toFixed(1))
      };
    }
    
    localStorage.setItem('ratings', JSON.stringify(userRatings));
  }
  
  // Show tool detail view
  function showToolDetail(tool) {
    const userRating = userRatings[tool.id] || {};
    
    modalBody.innerHTML = `
      <div class="tool-detail">
        <div class="detail-header">
          <div class="tool-image-large">
            <img src="${tool.icon || 'data:image/svg+xml,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 24 24\'%3E%3Cpath fill=\'%234361ee\' d=\'M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\'/%3E%3C/svg%3E'}" alt="${tool.name}">
          </div>
          <div class="detail-info">
            <h2>${tool.name}</h2>
            <div class="detail-meta">
              <span class="category">${tool.category}</span>
              <span class="tool-rating">‚òÖ ${userRating.avg?.toFixed(1) || tool.rating || 'N/A'} (${userRating.count || tool.ratingCount || 0})</span>
            </div>
            <a href="${tool.link}" class="tool-link" target="_blank">Visit Tool</a>
          </div>
        </div>
        
        <div class="detail-content">
          <h3>Description</h3>
          <p>${tool.description}</p>
          
          ${tool.features ? `
            <h3>Key Features</h3>
            <ul class="features">
              ${tool.features.map(f => `<li>${f}</li>`).join('')}
            </ul>
          ` : ''}
          
          <div class="detail-actions">
            <button class="bookmark-btn">${userBookmarks[tool.id] ? '‚òÖ Bookmarked' : '‚òÜ Bookmark'}</button>
            <button class="share-btn">üîó Share</button>
          </div>
        </div>
      </div>
    `;
    
    // Add event listeners
    modalBody.querySelector('.bookmark-btn').addEventListener('click', () => {
      toggleBookmark(tool.id);
      modal.style.display = 'none';
      filterTools(); // Refresh list
    });
    
    modalBody.querySelector('.share-btn').addEventListener('click', () => {
      navigator.clipboard.writeText(window.location.href.split('?')[0] + `?tool=${tool.id}`);
      alert('Link copied to clipboard!');
    });
    
    modal.style.display = 'flex';
  }
  
  // Show tool submission form
  function showSubmissionForm() {
    modalBody.innerHTML = `
      <h2>Submit a New AI Tool</h2>
      <p>Help grow our community-driven directory</p>
      
      <form id="tool-form">
        <div class="form-group">
          <label for="tool-name">Tool Name *</label>
          <input type="text" id="tool-name" required>
        </div>
        
        <div class="form-group">
          <label for="tool-description">Description *</label>
          <textarea id="tool-description" rows="3" required></textarea>
        </div>
        
        <div class="form-group">
          <label for="tool-link">Website URL *</label>
          <input type="url" id="tool-link" required>
        </div>
        
        <div class="form-group">
          <label for="tool-category">Category *</label>
          <select id="tool-category" required>
            <option value="">Select category</option>
            <option value="Chatbot">Chatbot</option>
            <option value="Image Editing">Image Editing</option>
            <option value="Art Generation">Art Generation</option>
            <option value="Writing">Writing</option>
            <option value="Video Editing">Video Editing</option>
            <option value="Audio Processing">Audio Processing</option>
            <option value="Coding">Coding</option>
            <option value="Research">Research</option>
            <option value="Other">Other</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="tool-features">Key Features (one per line)</label>
          <textarea id="tool-features" rows="3"></textarea>
        </div>
        
        <button type="submit" class="submit-btn">Submit Tool</button>
      </form>
    `;
    
    const form = document.getElementById('tool-form');
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      submitNewTool();
    });
    
    modal.style.display = 'flex';
  }
  
  // Submit new tool
  function submitNewTool() {
    const newTool = {
      id: 'user-' + Date.now(),
      name: document.getElementById('tool-name').value,
      description: document.getElementById('tool-description').value,
      link: document.getElementById('tool-link').value,
      category: document.getElementById('tool-category').value,
      added: new Date().toISOString(),
      features: document.getElementById('tool-features').value
        .split('\n')
        .filter(f => f.trim() !== '')
    };
    
    // Add to user contributions
    userContributions.push(newTool);
    localStorage.setItem('contributions', JSON.stringify(userContributions));
    
    // Update tool list
    allTools.push(newTool);
    
    // Add new category option if needed
    const categories = Array.from(categoryFilter.options).map(opt => opt.value);
    if (!categories.includes(newTool.category)) {
      const option = document.createElement('option');
      option.value = newTool.category;
      option.textContent = newTool.category;
      categoryFilter.appendChild(option);
    }
    
    // Show success message
    modalBody.innerHTML = `
      <div class="success-message">
        <svg width="60" height="60" viewBox="0 0 24 24">
          <path fill="#4CAF50" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
        </svg>
        <h2>Thank You!</h2>
        <p>Your tool "${newTool.name}" has been submitted.</p>
        <p>It will appear in the directory after community review.</p>
        <button class="submit-btn" onclick="modal.style.display='none'">Close</button>
      </div>
    `;
    
    // Refresh list after a delay
    setTimeout(() => {
      categoryFilter.value = newTool.category;
      filterTools();
    }, 3000);
  }
  
  // Toggle dark/light theme
  function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
  }
  
  // Change grid/list view
  function changeView(view) {
    if (view === 'grid') {
      toolList.classList.remove('list-view');
      toolList.classList.add('grid-view');
      gridViewBtn.classList.add('active');
      listViewBtn.classList.remove('active');
    } else {
      toolList.classList.remove('grid-view');
      toolList.classList.add('list-view');
      listViewBtn.classList.add('active');
      gridViewBtn.classList.remove('active');
    }
  }
  
  // Check URL for tool parameter
  function checkUrlForTool() {
    const params = new URLSearchParams(window.location.search);
    const toolId = params.get('tool');
    
    if (toolId) {
      const tool = allTools.find(t => t.id === toolId);
      if (tool) {
        showToolDetail(tool);
      }
    }
  }
  
  // Initialize URL check
  checkUrlForTool();
});
[
  {
    "id": "chatgpt",
    "name": "ChatGPT",
    "description": "Advanced AI chatbot that understands and generates human-like text responses",
    "link": "https://chat.openai.com",
    "category": "Chatbot",
    "added": "2023-01-15",
    "rating": 4.8,
    "ratingCount": 2450
  },
  {
    "id": "removebg",
    "name": "Remove.bg",
    "description": "Automatically remove image backgrounds in seconds with AI",
    "link": "https://www.remove.bg",
    "category": "Image Editing",
    "added": "2022-11-03",
    "rating": 4.5,
    "ratingCount": 1870
  },
  {
    "id": "midjourney",
    "name": "Midjourney",
    "description": "AI-powered text-to-image generator creating stunning visuals from descriptions",
    "link": "https://www.midjourney.com",
    "category": "Art Generation",
    "added": "2023-03-22",
    "rating": 4.7,
    "ratingCount": 2100,
    "features": [
      "Create images from text prompts",
      "Multiple artistic styles",
      "High-resolution outputs",
      "Community gallery"
    ]
  },
  {
    "id": "grammarly",
    "name": "Grammarly",
    "description": "AI writing assistant that checks grammar and suggests style improvements",
    "link": "https://www.grammarly.com",
    "category": "Writing",
    "added": "2023-02-10",
    "rating": 4.3,
    "ratingCount": 3250
  },
  {
    "id": "runway",
    "name": "Runway ML",
    "description": "Creative toolkit with AI magic tools for video editing and content creation",
    "link": "https://runwayml.com",
    "category": "Video Editing",
    "added": "2023-04-18",
    "rating": 4.4,
    "ratingCount": 920
  },
  {
    "id": "huggingface",
    "name": "Hugging Face",
    "description": "Open-source platform with thousands of pre-trained AI models",
    "link": "https://huggingface.co",
    "category": "Development",
    "added": "2023-01-30",
    "rating": 4.6,
    "ratingCount": 1500
  },
  {
    "id": "elevenlabs",
    "name": "ElevenLabs",
    "description": "AI voice generator creating natural-sounding speech in multiple languages",
    "link": "https://elevenlabs.io",
    "category": "Audio",
    "added": "2023-05-12",
    "rating": 4.2,
    "ratingCount": 780
  }
]